worker_processes  8;
pid /run/nginx.pid;

events { worker_connections 1024; }

http {
  proxy_cache_path /tmp/nginx levels=1:2 keys_zone=cache_zone:10m inactive=60m max_size=100m;

  client_body_buffer_size 10K;
  client_header_buffer_size 1k;
  client_max_body_size 8m;
  large_client_header_buffers 2 1k;

  client_body_timeout 10;
  client_header_timeout 10;
  keepalive_timeout 12;
  send_timeout 10;

  include       mime.types;
  default_type  application/octet-stream;

  log_format  main_timed  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" '
                          '$request_time $upstream_response_time $pipe $upstream_cache_status';

  access_log /dev/stdout main_timed;
  error_log /dev/stderr info;

  # # only log critical errors
  # error_log /var/log/nginx/error.log crit;

  # # to boost I/O on HDD we can disable access logs
  # access_log off;

  # copies data between one FD and other from within the kernel
  # faster then read() + write()
  sendfile off;

  # send headers in one peace, its better then sending them one by one 
  tcp_nopush on;

  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay on;

  # reduce the data that needs to be sent over network -- for testing environment
  gzip             on;
  gzip_comp_level  2;
  gzip_min_length  1000;
  gzip_proxied     expired no-cache no-store private auth;
  gzip_types       application/json;

  # allow the server to close connection on non responding client, this will free up memory
  reset_timedout_connection on;

#   server {
#     listen         80;
#     listen    [::]:80;
#     server_name    hackerlite.xyz www.hackerlite.xyz;
#     return 301 https://$server_name$request_uri;
#   }

  server {
    listen [::]:80 default_server;
    listen 80 default_server;
    server_name _;
    # server_name hackerlite.xyz;

    # listen 443 http2 ssl;

    # server_name hackerlite.xyz www.hackerlite.xyz;

    # ssl_certificate /etc/letsencrypt/live/hackerlite.xyz/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/hackerlite.xyz/privkey.pem;

    # From https://cipherli.st/
    # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # ssl_prefer_server_ciphers on;
    # ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    # ssl_ecdh_curve secp384r1;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_tickets off;
    # ssl_stapling on;
    # ssl_stapling_verify on;

    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # location ~ /.well-known {
    #         allow all;
    # }

    charset utf-8;
    add_header "X-UA-Compatible" "IE=Edge,chrome=1";

    location ~ /(runner|runnerByRace|autocomplete) {
      #  add_header Allow "GET" always;
      if ( $request_method !~ ^(GET)$ ) {
          return 405;
      }
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header Host $http_host;
      proxy_set_header X-Protocol http;
      proxy_read_timeout 480;
      proxy_connect_timeout 480;
      proxy_cache cache_zone;
      proxy_cache_key "$scheme$request_method$host$request_uri";
      # proxy_ignore_headers Expires Cache-Control;
      proxy_cache_valid  200 302 304 1m;
      proxy_cache_valid  404      60m;
      add_header X-Cache-Status $upstream_cache_status;
    #   add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"; 
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;

      proxy_pass http://localhost:5555;
    }

     # redirect bad request to the static page /404.html
      #
      error_page 400 /400.html;
      location  /400.html {
          root /var/lib/nginx/html;
          internal;
      }

      # redirect page not found to the static page /404.html
      #
      error_page 404 /404.html;
      location  /404.html {
          root /var/lib/nginx/html;
          internal;
      }

      # redirect method not allowed to the static page /405.html
      #
      error_page 405 /405.html;
      location  /405.html {
          root /var/lib/nginx/html;
          internal;
      }

      # redirect too many reaquest to the static page /429.html
      #
      error_page 429 /429.html;
      location  /429.html {
          root /var/lib/nginx/html;
          internal;
      }

      # redirect server error to the static page /500.html
      #
      error_page 500 502 503 504 /500.html;
      location  /500.html {
          root /var/lib/nginx/html;
          internal;
      }

    # location /runnerByRace {
    #   proxy_cache cache_zone;
    #   proxy_cache_key "$scheme$request_method$host$request_uri$is_args$arg_build";
    #   add_header X-Cache-Status $upstream_cache_status;
    # #   add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"; 
    #   add_header X-Frame-Options DENY;
    #   add_header X-Content-Type-Options nosniff;

    #   proxy_pass http://localhost:5555;
    # }

    # location /autocomplete {
    #   proxy_cache cache_zone;
    #   proxy_cache_key "$scheme$request_method$host$request_uri$is_args$arg_build";
    #   add_header X-Cache-Status $upstream_cache_status;
    # #   add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"; 
    #   add_header X-Frame-Options DENY;
    #   add_header X-Content-Type-Options nosniff;

    #   proxy_pass http://localhost:5555;
    # }

    # deny access to . files, for security
        #
    location ~ /\. {
        log_not_found off;
        deny all;
    }
  }
}